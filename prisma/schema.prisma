generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id Int @id @default(autoincrement())

  name String @db.VarChar(255)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  users      User[]
  posts      Post[]
  categories Category[]
  comments   Comment[]
}

model User {
  id        String @id @default(cuid())
  accountId Int

  emailAddress String   @unique
  firstName    String?
  lastName     String?
  role         UserRole @default(Guest)
  avatarUrl    String?  @db.VarChar(255)
  phoneNumber  String?  @db.VarChar(255)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  account Account @relation(fields: [accountId], references: [id])
  posts   Post[]
}

enum UserRole {
  Admin
  Editor
  Guest
}

model Post {
  id        Int    @id @default(autoincrement())
  accountId Int
  authorId  String

  status        PostStatus @default(Idea)
  title         String     @db.VarChar(255)
  slug          String     @db.VarChar(255)
  excerpt       String?
  content       String?
  /// [PostMeta]
  meta          Json[]
  notes         String?
  allowcomments Boolean    @default(true)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  account    Account    @relation(fields: [accountId], references: [id])
  author     User       @relation(fields: [authorId], references: [id])
  categories Category[]
  comments   Comment[]
}

enum PostStatus {
  Idea
  InProgress
  Finished
  Published
}

model Category {
  id        Int @id @default(autoincrement())
  accountId Int

  name        String  @db.VarChar(255)
  slug        String  @db.VarChar(255)
  description String?

  account Account @relation(fields: [accountId], references: [id])
  posts   Post[]
}

model Comment {
  id        Int  @id @default(autoincrement())
  accountId Int
  postId    Int
  parentId  Int?

  content String
  status  CommentStatus @default(PendingReview)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  account Account   @relation(fields: [accountId], references: [id])
  post    Post      @relation(fields: [postId], references: [id])
  replies Comment[] @relation("Replies")
  parent  Comment?  @relation("Replies", fields: [parentId], references: [id])
}

enum CommentStatus {
  PendingReview
  Visible
  Blocked
}
